plugins {
    alias(libs.plugins.androidApplication)
    alias(libs.plugins.kotlinAndroid)
    alias(libs.plugins.composeCompiler)
    alias(libs.plugins.googleKsp)
    alias(libs.plugins.kotlinParcelize)
    alias(libs.plugins.baselineProfile)
}

android {
    def maxAndroidVersion = Integer.parseInt(libs.versions.maxAndroidVersion.get())
    def keystoreProperties = new Properties()
    def keystorePropertiesFile = rootProject.file("local.properties")
    if (keystorePropertiesFile.exists()) {
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
    }

    signingConfigs {
        chiu {
            storeFile file(keystoreProperties["RELEASE_STORE_FILE"])
            storePassword keystoreProperties["RELEASE_STORE_PASSWORD"]
            keyAlias keystoreProperties["RELEASE_KEY_ALIAS"]
            keyPassword keystoreProperties["RELEASE_KEY_PASSWORD"]
        }
    }

    namespace 'com.hfut.schedule'

    compileSdk maxAndroidVersion

    splits {
        abi {
            // 启用 ABI 分割
            enable true
            reset()
            include 'arm64-v8a',  'x86_64'
            universalApk true
        }
    }

    defaultConfig {
        applicationId "com.hfut.schedule"
        minSdk Integer.parseInt(libs.versions.minAndroidVersion.get())
        targetSdk maxAndroidVersion
        versionCode 228
        versionName "4.18.3.1 Preview"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    applicationVariants.configureEach { variant ->
        variant.outputs.each { output ->
            def abi = output.getFilter(com.android.build.OutputFile.ABI)
            def versionName = variant.versionName
            def buildType = variant.buildType.name
            if (abi != null) {
                def baseVersionCode = defaultConfig.versionCode * 10
                def abiVersionCodes = [
                        "armeabi-v7a" : 1,
                        "arm64-v8a"   : 2,
                        "x86"         : 3,
                        "x86_64"      : 4
                ]
                def newVersionCode = baseVersionCode + (abiVersionCodes[abi] ?: 0)
                // 判断是否显示release
                def type = ""
                if(buildType != "release") {
                    type = "-${buildType}"
                }
                // 输出文件名
                output.outputFileName = "${versionName}-${abi}${type}.apk"
                // 分架构版本号
                output.versionCodeOverride = newVersionCode
            }
        }
    }


    buildTypes {
        release {
            // R8混淆
            // 开启前 需要制定proguard-rules.pro规则文件，否则会有些功能被误删
            minifyEnabled false
            // 压缩未使用资源
            shrinkResources false
            // 最终构建的元数据中包含VCS(Git)的信息
            // 关闭以防止F-Droid构建时与本包不同
            vcsInfo.include false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.chiu
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    buildFeatures {
        compose true
        aidl true
    }

    composeOptions {
        kotlinCompilerExtensionVersion '1.5.2'
    }

    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    dependenciesInfo {
        // F-Droid
        includeInApk = false
        includeInBundle = false
    }
}


dependencies {
    implementation platform(libs.kotlin.bom)
    implementation(libs.androidx.core.ktx)
    // Compose
    implementation(libs.androidx.activity.compose)
    implementation(libs.androidx.ui)
    implementation(libs.androidx.ui.graphics)
    implementation(platform(libs.androidx.compose.bom))

    implementation(libs.androidx.appcompat)
    // 测试
//    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.testExt.junit)
//    androidTestImplementation(libs.androidx.espresso.core)
//    androidTestImplementation(libs.androidx.ui.test.junit4)
//    androidTestImplementation platform(libs.androidx.compose.bom)
    // 基准测试依赖
    androidTestImplementation(libs.androidx.benchmark.macro.junit4)
    androidTestImplementation(libs.androidx.uiautomator)
    // 内存泄漏
    debugImplementation(libs.leakcanary)
    // 测试
    debugImplementation(libs.androidx.ui.tooling)
    debugImplementation(libs.androidx.ui.test.manifest)
    implementation(libs.androidx.ui.tooling.preview)
    // LifeCycle
    implementation(libs.androidx.lifecycle.runtime.ktx)
    implementation(libs.androidx.lifecycle.livedata.ktx)
//    implementation(libs.androidx.lifecycle.viewmodel.compose)
    implementation(libs.androidx.lifecycle.viewmodel.ktx)
    implementation(libs.androidx.lifecycle.extensions)
    // 动画
    implementation(libs.androidx.animation.graphics.android)
    implementation(libs.androidx.animation)
    // 扫码
    implementation(libs.androidx.camera.view)
    implementation(libs.androidx.camera.core)
    implementation(libs.androidx.camera.camera2)
    implementation(libs.androidx.camera.lifecycle)
    // 二维码
    implementation(libs.zxing)
    // Jsoup
    implementation(libs.jsoup)
    // OkHttp
    implementation(libs.okhttp)
    // Retrofit
    implementation(libs.retrofit)
    implementation(libs.scalars)
    implementation(libs.gson)
    // Material Design 1
    implementation(libs.androidx.material)
    // Material Design 3
    implementation(libs.androidx.material3) {
        version {
            // 锁死版本 新版本Drawer回弹被砍、BottomSheet状态栏填充无法关掉
            strictly(libs.versions.material3.get())
        }
    }
    // 透明状态栏
    implementation(libs.accompanist.systemuicontroller)
    // 导航
    implementation(libs.navigation2)
    // 开屏显示
    implementation(libs.androidx.core.splashscreen)
    // 模糊库
    implementation(libs.haze)
    implementation(libs.haze.materials)
    // 图片库  别用Coil，与登录逻辑代码有玄学冲突
    implementation(libs.glide)
    // DataStore
    implementation(libs.androidx.datastore.preferences)
    // 用于和风天气密钥生成的JWT
    implementation(libs.eddsa)
    // 礼花
    implementation(libs.konfetti)
    // 图片验证码识别
    implementation(libs.tesseract)
    // 预编译
    implementation(libs.androidx.profileinstaller)
    // 增量更新
    implementation(libs.bsdiff)
    // Room
    implementation(libs.androidx.room.runtime)
    // KSP Room
    ksp(libs.androidx.room.compiler)
    // 协程 Room
    implementation(libs.androidx.room.ktx)
    // WebKit
    implementation(libs.androidx.webkit)
    // 取色
    implementation(libs.material.kolor)
    implementation(libs.androidx.palette)
    // 拖拽
    implementation(libs.reorderable)
    // 液态玻璃
    implementation(libs.liquid.glass)
    // 生物识别 指纹
    // implementation(libs.androidx.biometric)
    // 权限
    // implementation(libs.accompanist.permissions)
    // 镜面效果
    implementation(libs.mirror)
    // 模块
    // 转场动画
    implementation(project(":transition"))
    implementation implementation(project(':common'))
    // 可单独使用的UI
    // 消费预测及共用代码
    implementation(project(":shared"))
    // 基准文件
    baselineProfile project(":baselineProfile")
}
