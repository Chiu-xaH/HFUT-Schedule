plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'org.jetbrains.kotlin.plugin.compose'
    id 'com.google.devtools.ksp'
}

android {
    signingConfigs {
        chiu {
            storeFile file('D:\\文档\\Android Sign Key\\Chiu-xaH.jks')
            storePassword 'zhaosihan0908'
            keyAlias 'Chiu-xaH'
            keyPassword 'zhaosihan0908'
        }
    }
    namespace 'com.hfut.schedule'
    compileSdk 36

    splits {
        abi {
            // 启用 ABI 分割
            enable true
            reset()
//            'armeabi-v7a', 'x86',
            include 'arm64-v8a',  'x86_64'
            universalApk true
        }
    }

    defaultConfig {
        applicationId "com.hfut.schedule"
        minSdk 26
        targetSdk 36
        versionCode 185
        versionName "4.15.5.1"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
    }

    applicationVariants.configureEach { variant ->
        variant.outputs.each { output ->
            def abi = output.getFilter(com.android.build.OutputFile.ABI)
            def versionName = variant.versionName
            def buildType = variant.buildType.name
            if (abi != null) {
                def baseVersionCode = defaultConfig.versionCode * 10
                def abiVersionCodes = [
                        "armeabi-v7a" : 1,
                        "arm64-v8a"   : 2,
                        "x86"         : 3,
                        "x86_64"      : 4
                ]
                def newVersionCode = baseVersionCode + (abiVersionCodes[abi] ?: 0)
                // 判断是否显示release
                def type = ""
                if(buildType != "release") {
                    type = "-${buildType}"
                }
                // 输出文件名
                output.outputFileName = "${versionName}-${abi}${type}.apk"
                // 分架构版本号
                output.versionCodeOverride = newVersionCode
            }
        }
    }

    buildTypes {
        release {
            // R8
            minifyEnabled false
            // 压缩未使用资源
            shrinkResources false
            // 最终构建的元数据中包含 VCS(Git)的信息
            vcsInfo.include false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        benchmark {
            signingConfig signingConfigs.debug
            matchingFallbacks = ['release']
            debuggable false
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }
    kotlinOptions {
        jvmTarget = '11'
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.5.2'
    }
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    dependenciesInfo {
        // F-Droid
        includeInApk = false
        includeInBundle = false
    }
}


dependencies {
    implementation platform(libs.kotlin.bom)
    implementation libs.androidx.core.ktx
    // Compose
    implementation libs.androidx.activity.compose
    implementation libs.androidx.ui
    implementation libs.androidx.ui.graphics
    implementation platform(libs.androidx.compose.bom)

    implementation libs.androidx.appcompat
    // 测试
    testImplementation libs.junit
    androidTestImplementation libs.androidx.junit
    androidTestImplementation libs.androidx.espresso.core
    androidTestImplementation libs.androidx.ui.test.junit4
    androidTestImplementation platform(libs.androidx.compose.bom)
    debugImplementation libs.androidx.ui.tooling
    implementation libs.androidx.ui.tooling.preview
    debugImplementation libs.androidx.ui.test.manifest
    // LifeCycle
    implementation libs.androidx.lifecycle.runtime.ktx
    implementation libs.androidx.lifecycle.livedata.ktx
    implementation libs.androidx.lifecycle.viewmodel.ktx
    implementation libs.androidx.lifecycle.extensions
    // 动画
    implementation libs.androidx.animation.graphics.android
    implementation libs.androidx.animation
    // 扫码
    implementation libs.androidx.camera.view
    implementation libs.androidx.camera.core
    implementation libs.androidx.camera.camera2
    implementation libs.androidx.camera.lifecycle
    // 二维码
    implementation libs.core
    // Jsoup
    implementation libs.jsoup
    // OkHttp
    implementation libs.okhttp
    // Retrofit
    implementation libs.converter.scalars
    implementation libs.retrofit
    implementation libs.converter.gson
    // Material Design 1
    implementation libs.androidx.material
    // Material Design 3
    implementation libs.androidx.material3
    // 透明状态栏
    implementation libs.accompanist.systemuicontroller
    // 底栏
    implementation libs.androidx.navigation.compose
    // 开屏显示
    implementation libs.androidx.core.splashscreen
    // 模糊库
    implementation libs.haze
    implementation libs.haze.materials
    // 图片库  别用Coil，与登录逻辑代码有玄学冲突
    implementation libs.compose
    // DataStore
    implementation libs.androidx.datastore.preferences
    // 生物识别 指纹
//    implementation libs.androidx.biometric
    // 用于和风天气密钥生成的JWT
    implementation libs.eddsa
    // 礼花
    implementation libs.konfetti.compose
    // 图片验证码识别
    implementation libs.tesseract4android
    // 预编译
    implementation libs.androidx.profileinstaller
    // 增量更新
    implementation libs.bsdiff.lib
    // Room
    implementation libs.androidx.room.runtime
    // KSP Room
    ksp libs.androidx.room.compiler
    // 协程 Room
    implementation libs.androidx.room.ktx
    // 共享KMP模块
}
